name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    # Xcode will be selected dynamically in the setup step
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: |
        # Try to find the best available Xcode version with Swift 6.0+
        if [ -d "/Applications/Xcode_16.2.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_16.2.app/Contents/Developer"
          echo "Using Xcode 16.2"
        elif [ -d "/Applications/Xcode_16.1.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_16.1.app/Contents/Developer"
          echo "Using Xcode 16.1"
        elif [ -d "/Applications/Xcode_16.0.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_16.0.app/Contents/Developer"
          echo "Using Xcode 16.0"
        elif [ -d "/Applications/Xcode_15.4.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_15.4.app/Contents/Developer"
          echo "Using Xcode 15.4"
        elif [ -d "/Applications/Xcode_15.3.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_15.3.app/Contents/Developer"
          echo "Using Xcode 15.3"
        elif [ -d "/Applications/Xcode_15.2.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_15.2.app/Contents/Developer"
          echo "Using Xcode 15.2"
        elif [ -d "/Applications/Xcode.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
          echo "Using default Xcode"
        else
          echo "Error: No Xcode installation found"
          exit 1
        fi
        
        sudo xcode-select -s "$DEVELOPER_DIR"
        echo "DEVELOPER_DIR=$DEVELOPER_DIR" >> $GITHUB_ENV
        xcodebuild -version
        swift --version
    
    - name: Cache Swift build
      uses: actions/cache@v4
      with:
        path: |
          peekaboo-cli/.build
          peekaboo
        key: ${{ runner.os }}-swift-${{ hashFiles('peekaboo-cli/Package.swift', 'peekaboo-cli/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Build Swift CLI for tests
      run: |
        cd peekaboo-cli
        swift build -c release
        # Copy the binary to the expected location
        cp .build/release/peekaboo ../peekaboo
        cd ..
        # Make it executable
        chmod +x peekaboo
        # Verify it exists
        ls -la peekaboo
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run tests with coverage
      run: npm run test:coverage
      timeout-minutes: 15
      env:
        CI: true
        PEEKABOO_LOG_LEVEL: warn
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-swift:
    runs-on: macos-latest
    timeout-minutes: 30
    
    # Xcode will be selected dynamically in the setup step
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: |
        # Try to find the best available Xcode version with Swift 6.0+
        if [ -d "/Applications/Xcode_16.2.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_16.2.app/Contents/Developer"
          echo "Using Xcode 16.2"
        elif [ -d "/Applications/Xcode_16.1.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_16.1.app/Contents/Developer"
          echo "Using Xcode 16.1"
        elif [ -d "/Applications/Xcode_16.0.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_16.0.app/Contents/Developer"
          echo "Using Xcode 16.0"
        elif [ -d "/Applications/Xcode_15.4.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_15.4.app/Contents/Developer"
          echo "Using Xcode 15.4"
        elif [ -d "/Applications/Xcode_15.3.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_15.3.app/Contents/Developer"
          echo "Using Xcode 15.3"
        elif [ -d "/Applications/Xcode_15.2.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode_15.2.app/Contents/Developer"
          echo "Using Xcode 15.2"
        elif [ -d "/Applications/Xcode.app" ]; then
          DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
          echo "Using default Xcode"
        else
          echo "Error: No Xcode installation found"
          exit 1
        fi
        
        sudo xcode-select -s "$DEVELOPER_DIR"
        echo "DEVELOPER_DIR=$DEVELOPER_DIR" >> $GITHUB_ENV
        xcodebuild -version
        swift --version
    
    - name: Cache Swift build artifacts
      uses: actions/cache@v4
      with:
        path: peekaboo-cli/.build
        key: ${{ runner.os }}-swift-build-${{ hashFiles('peekaboo-cli/Package.swift', 'peekaboo-cli/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-build-
    
    - name: Build Swift CLI
      run: |
        cd peekaboo-cli
        swift build -c release
    
    - name: Run Swift tests
      timeout-minutes: 10
      run: |
        cd peekaboo-cli
        swift test --parallel --skip "LocalIntegrationTests|ScreenshotValidationTests|ApplicationFinderTests|WindowManagerTests"
      env:
        CI: true