name: Cross-Platform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-macos:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build for macOS
      run: |
        cd peekaboo-cli
        swift build -c release
    
    - name: Run tests
      run: |
        cd peekaboo-cli
        swift test
    
    - name: Test CLI functionality
      run: |
        cd peekaboo-cli
        swift run peekaboo --help
        swift run peekaboo list-displays
        swift run peekaboo list-apps

  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxcomposite-dev \
          libxrandr-dev \
          libxdamage-dev \
          libxfixes-dev \
          libwayland-dev \
          libwayland-client0 \
          libwayland-cursor0 \
          libwayland-egl1 \
          pkg-config
    
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build for Linux
      run: |
        cd peekaboo-cli
        swift build -c release
    
    - name: Run tests
      run: |
        cd peekaboo-cli
        swift test
    
    - name: Test CLI functionality
      run: |
        cd peekaboo-cli
        swift run peekaboo --help
        # Note: Display/app listing may not work in headless CI
        swift run peekaboo list-displays || echo "Display listing not available in headless environment"

  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Swift
      uses: compnerd/gha-setup-swift@main
      with:
        branch: swift-5.10-release
        tag: 5.10-RELEASE
    
    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build for Windows
      shell: cmd
      run: |
        cd peekaboo-cli
        swift build -c release
    
    - name: Run tests
      shell: cmd
      run: |
        cd peekaboo-cli
        swift test
    
    - name: Test CLI functionality
      shell: cmd
      run: |
        cd peekaboo-cli
        swift run peekaboo --help
        swift run peekaboo list-displays
        swift run peekaboo list-apps

  build-artifacts:
    needs: [test-macos, test-linux, test-windows]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14
            platform: macos
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
          - os: windows-latest
            platform: windows
            arch: x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift (macOS)
      if: matrix.platform == 'macos'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Setup Swift (Linux)
      if: matrix.platform == 'linux'
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.10"
    
    - name: Setup Swift (Windows)
      if: matrix.platform == 'windows'
      uses: compnerd/gha-setup-swift@main
      with:
        branch: swift-5.10-release
        tag: 5.10-RELEASE
    
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libx11-dev \
          libxcomposite-dev \
          libxrandr-dev \
          libxdamage-dev \
          libxfixes-dev \
          libwayland-dev \
          pkg-config
    
    - name: Build release binary
      shell: bash
      run: |
        cd peekaboo-cli
        swift build -c release
    
    - name: Package binary (Unix)
      if: matrix.platform != 'windows'
      run: |
        cd peekaboo-cli
        mkdir -p dist
        cp .build/release/peekaboo dist/
        tar -czf dist/peekaboo-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz -C dist peekaboo
    
    - name: Package binary (Windows)
      if: matrix.platform == 'windows'
      shell: cmd
      run: |
        cd peekaboo-cli
        mkdir dist
        copy .build\release\peekaboo.exe dist\
        powershell Compress-Archive -Path dist\peekaboo.exe -DestinationPath dist\peekaboo-${{ matrix.platform }}-${{ matrix.arch }}.zip
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: peekaboo-${{ matrix.platform }}-${{ matrix.arch }}
        path: peekaboo-cli/dist/peekaboo-${{ matrix.platform }}-${{ matrix.arch }}.*
        retention-days: 30

  integration-tests:
    needs: [test-macos, test-linux, test-windows]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14
            platform: macos
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift and dependencies
      uses: ./.github/actions/setup-swift-${{ matrix.platform }}
    
    - name: Run integration tests
      run: |
        cd peekaboo-cli
        swift test --filter IntegrationTests
    
    - name: Performance benchmarks
      if: matrix.platform == 'macos'  # Only run on macOS for now
      run: |
        cd peekaboo-cli
        swift test --filter PerformanceTests

